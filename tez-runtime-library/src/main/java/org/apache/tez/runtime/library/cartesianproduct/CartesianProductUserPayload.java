// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CartesianProductPayload.proto

package org.apache.tez.runtime.library.cartesianproduct;

public final class CartesianProductUserPayload {
  private CartesianProductUserPayload() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface CartesianProductConfigProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required bool isPartitioned = 1;
    /**
     * <code>required bool isPartitioned = 1;</code>
     */
    boolean hasIsPartitioned();
    /**
     * <code>required bool isPartitioned = 1;</code>
     */
    boolean getIsPartitioned();

    // repeated string sources = 2;
    /**
     * <code>repeated string sources = 2;</code>
     */
    java.util.List<java.lang.String>
    getSourcesList();
    /**
     * <code>repeated string sources = 2;</code>
     */
    int getSourcesCount();
    /**
     * <code>repeated string sources = 2;</code>
     */
    java.lang.String getSources(int index);
    /**
     * <code>repeated string sources = 2;</code>
     */
    com.google.protobuf.ByteString
        getSourcesBytes(int index);

    // repeated int32 numPartitions = 3;
    /**
     * <code>repeated int32 numPartitions = 3;</code>
     */
    java.util.List<java.lang.Integer> getNumPartitionsList();
    /**
     * <code>repeated int32 numPartitions = 3;</code>
     */
    int getNumPartitionsCount();
    /**
     * <code>repeated int32 numPartitions = 3;</code>
     */
    int getNumPartitions(int index);

    // optional string filterClassName = 4;
    /**
     * <code>optional string filterClassName = 4;</code>
     */
    boolean hasFilterClassName();
    /**
     * <code>optional string filterClassName = 4;</code>
     */
    java.lang.String getFilterClassName();
    /**
     * <code>optional string filterClassName = 4;</code>
     */
    com.google.protobuf.ByteString
        getFilterClassNameBytes();

    // optional bytes filterUserPayload = 5;
    /**
     * <code>optional bytes filterUserPayload = 5;</code>
     */
    boolean hasFilterUserPayload();
    /**
     * <code>optional bytes filterUserPayload = 5;</code>
     */
    com.google.protobuf.ByteString getFilterUserPayload();

    // optional float minFraction = 6;
    /**
     * <code>optional float minFraction = 6;</code>
     */
    boolean hasMinFraction();
    /**
     * <code>optional float minFraction = 6;</code>
     */
    float getMinFraction();

    // optional float maxFraction = 7;
    /**
     * <code>optional float maxFraction = 7;</code>
     */
    boolean hasMaxFraction();
    /**
     * <code>optional float maxFraction = 7;</code>
     */
    float getMaxFraction();

    // optional int32 maxParallelism = 8;
    /**
     * <code>optional int32 maxParallelism = 8;</code>
     */
    boolean hasMaxParallelism();
    /**
     * <code>optional int32 maxParallelism = 8;</code>
     */
    int getMaxParallelism();

    // optional int64 minOpsPerWorker = 9;
    /**
     * <code>optional int64 minOpsPerWorker = 9;</code>
     */
    boolean hasMinOpsPerWorker();
    /**
     * <code>optional int64 minOpsPerWorker = 9;</code>
     */
    long getMinOpsPerWorker();

    // repeated int32 numChunks = 10;
    /**
     * <code>repeated int32 numChunks = 10;</code>
     */
    java.util.List<java.lang.Integer> getNumChunksList();
    /**
     * <code>repeated int32 numChunks = 10;</code>
     */
    int getNumChunksCount();
    /**
     * <code>repeated int32 numChunks = 10;</code>
     */
    int getNumChunks(int index);

    // repeated int32 numTaskPerVertexInGroup = 11;
    /**
     * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
     */
    java.util.List<java.lang.Integer> getNumTaskPerVertexInGroupList();
    /**
     * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
     */
    int getNumTaskPerVertexInGroupCount();
    /**
     * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
     */
    int getNumTaskPerVertexInGroup(int index);

    // optional int32 positionInGroup = 12;
    /**
     * <code>optional int32 positionInGroup = 12;</code>
     */
    boolean hasPositionInGroup();
    /**
     * <code>optional int32 positionInGroup = 12;</code>
     */
    int getPositionInGroup();

    // optional int32 numPartitionsForFairCase = 13;
    /**
     * <code>optional int32 numPartitionsForFairCase = 13;</code>
     */
    boolean hasNumPartitionsForFairCase();
    /**
     * <code>optional int32 numPartitionsForFairCase = 13;</code>
     */
    int getNumPartitionsForFairCase();

    // optional bool enableGrouping = 14;
    /**
     * <code>optional bool enableGrouping = 14;</code>
     */
    boolean hasEnableGrouping();
    /**
     * <code>optional bool enableGrouping = 14;</code>
     */
    boolean getEnableGrouping();

    // optional float groupingFraction = 15;
    /**
     * <code>optional float groupingFraction = 15;</code>
     */
    boolean hasGroupingFraction();
    /**
     * <code>optional float groupingFraction = 15;</code>
     */
    float getGroupingFraction();
  }
  /**
   * Protobuf type {@code CartesianProductConfigProto}
   */
  public static final class CartesianProductConfigProto extends
      com.google.protobuf.GeneratedMessage
      implements CartesianProductConfigProtoOrBuilder {
    // Use CartesianProductConfigProto.newBuilder() to construct.
    private CartesianProductConfigProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CartesianProductConfigProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CartesianProductConfigProto defaultInstance;
    public static CartesianProductConfigProto getDefaultInstance() {
      return defaultInstance;
    }

    public CartesianProductConfigProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CartesianProductConfigProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              isPartitioned_ = input.readBool();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                sources_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              sources_.add(input.readBytes());
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                numPartitions_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              numPartitions_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                numPartitions_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                numPartitions_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 34: {
              bitField0_ |= 0x00000002;
              filterClassName_ = input.readBytes();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000004;
              filterUserPayload_ = input.readBytes();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000008;
              minFraction_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000010;
              maxFraction_ = input.readFloat();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              maxParallelism_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              minOpsPerWorker_ = input.readInt64();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                numChunks_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              numChunks_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                numChunks_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                numChunks_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                numTaskPerVertexInGroup_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              numTaskPerVertexInGroup_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                numTaskPerVertexInGroup_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                numTaskPerVertexInGroup_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              positionInGroup_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000100;
              numPartitionsForFairCase_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000200;
              enableGrouping_ = input.readBool();
              break;
            }
            case 125: {
              bitField0_ |= 0x00000400;
              groupingFraction_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          sources_ = new com.google.protobuf.UnmodifiableLazyStringList(sources_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          numPartitions_ = java.util.Collections.unmodifiableList(numPartitions_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          numChunks_ = java.util.Collections.unmodifiableList(numChunks_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          numTaskPerVertexInGroup_ = java.util.Collections.unmodifiableList(numTaskPerVertexInGroup_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.internal_static_CartesianProductConfigProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.internal_static_CartesianProductConfigProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto.class, org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto.Builder.class);
    }

    public static com.google.protobuf.Parser<CartesianProductConfigProto> PARSER =
        new com.google.protobuf.AbstractParser<CartesianProductConfigProto>() {
      public CartesianProductConfigProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CartesianProductConfigProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CartesianProductConfigProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required bool isPartitioned = 1;
    public static final int ISPARTITIONED_FIELD_NUMBER = 1;
    private boolean isPartitioned_;
    /**
     * <code>required bool isPartitioned = 1;</code>
     */
    public boolean hasIsPartitioned() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bool isPartitioned = 1;</code>
     */
    public boolean getIsPartitioned() {
      return isPartitioned_;
    }

    // repeated string sources = 2;
    public static final int SOURCES_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList sources_;
    /**
     * <code>repeated string sources = 2;</code>
     */
    public java.util.List<java.lang.String>
        getSourcesList() {
      return sources_;
    }
    /**
     * <code>repeated string sources = 2;</code>
     */
    public int getSourcesCount() {
      return sources_.size();
    }
    /**
     * <code>repeated string sources = 2;</code>
     */
    public java.lang.String getSources(int index) {
      return sources_.get(index);
    }
    /**
     * <code>repeated string sources = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSourcesBytes(int index) {
      return sources_.getByteString(index);
    }

    // repeated int32 numPartitions = 3;
    public static final int NUMPARTITIONS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> numPartitions_;
    /**
     * <code>repeated int32 numPartitions = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getNumPartitionsList() {
      return numPartitions_;
    }
    /**
     * <code>repeated int32 numPartitions = 3;</code>
     */
    public int getNumPartitionsCount() {
      return numPartitions_.size();
    }
    /**
     * <code>repeated int32 numPartitions = 3;</code>
     */
    public int getNumPartitions(int index) {
      return numPartitions_.get(index);
    }

    // optional string filterClassName = 4;
    public static final int FILTERCLASSNAME_FIELD_NUMBER = 4;
    private java.lang.Object filterClassName_;
    /**
     * <code>optional string filterClassName = 4;</code>
     */
    public boolean hasFilterClassName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string filterClassName = 4;</code>
     */
    public java.lang.String getFilterClassName() {
      java.lang.Object ref = filterClassName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          filterClassName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string filterClassName = 4;</code>
     */
    public com.google.protobuf.ByteString
        getFilterClassNameBytes() {
      java.lang.Object ref = filterClassName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        filterClassName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional bytes filterUserPayload = 5;
    public static final int FILTERUSERPAYLOAD_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString filterUserPayload_;
    /**
     * <code>optional bytes filterUserPayload = 5;</code>
     */
    public boolean hasFilterUserPayload() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes filterUserPayload = 5;</code>
     */
    public com.google.protobuf.ByteString getFilterUserPayload() {
      return filterUserPayload_;
    }

    // optional float minFraction = 6;
    public static final int MINFRACTION_FIELD_NUMBER = 6;
    private float minFraction_;
    /**
     * <code>optional float minFraction = 6;</code>
     */
    public boolean hasMinFraction() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float minFraction = 6;</code>
     */
    public float getMinFraction() {
      return minFraction_;
    }

    // optional float maxFraction = 7;
    public static final int MAXFRACTION_FIELD_NUMBER = 7;
    private float maxFraction_;
    /**
     * <code>optional float maxFraction = 7;</code>
     */
    public boolean hasMaxFraction() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float maxFraction = 7;</code>
     */
    public float getMaxFraction() {
      return maxFraction_;
    }

    // optional int32 maxParallelism = 8;
    public static final int MAXPARALLELISM_FIELD_NUMBER = 8;
    private int maxParallelism_;
    /**
     * <code>optional int32 maxParallelism = 8;</code>
     */
    public boolean hasMaxParallelism() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 maxParallelism = 8;</code>
     */
    public int getMaxParallelism() {
      return maxParallelism_;
    }

    // optional int64 minOpsPerWorker = 9;
    public static final int MINOPSPERWORKER_FIELD_NUMBER = 9;
    private long minOpsPerWorker_;
    /**
     * <code>optional int64 minOpsPerWorker = 9;</code>
     */
    public boolean hasMinOpsPerWorker() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int64 minOpsPerWorker = 9;</code>
     */
    public long getMinOpsPerWorker() {
      return minOpsPerWorker_;
    }

    // repeated int32 numChunks = 10;
    public static final int NUMCHUNKS_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> numChunks_;
    /**
     * <code>repeated int32 numChunks = 10;</code>
     */
    public java.util.List<java.lang.Integer>
        getNumChunksList() {
      return numChunks_;
    }
    /**
     * <code>repeated int32 numChunks = 10;</code>
     */
    public int getNumChunksCount() {
      return numChunks_.size();
    }
    /**
     * <code>repeated int32 numChunks = 10;</code>
     */
    public int getNumChunks(int index) {
      return numChunks_.get(index);
    }

    // repeated int32 numTaskPerVertexInGroup = 11;
    public static final int NUMTASKPERVERTEXINGROUP_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> numTaskPerVertexInGroup_;
    /**
     * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
     */
    public java.util.List<java.lang.Integer>
        getNumTaskPerVertexInGroupList() {
      return numTaskPerVertexInGroup_;
    }
    /**
     * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
     */
    public int getNumTaskPerVertexInGroupCount() {
      return numTaskPerVertexInGroup_.size();
    }
    /**
     * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
     */
    public int getNumTaskPerVertexInGroup(int index) {
      return numTaskPerVertexInGroup_.get(index);
    }

    // optional int32 positionInGroup = 12;
    public static final int POSITIONINGROUP_FIELD_NUMBER = 12;
    private int positionInGroup_;
    /**
     * <code>optional int32 positionInGroup = 12;</code>
     */
    public boolean hasPositionInGroup() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 positionInGroup = 12;</code>
     */
    public int getPositionInGroup() {
      return positionInGroup_;
    }

    // optional int32 numPartitionsForFairCase = 13;
    public static final int NUMPARTITIONSFORFAIRCASE_FIELD_NUMBER = 13;
    private int numPartitionsForFairCase_;
    /**
     * <code>optional int32 numPartitionsForFairCase = 13;</code>
     */
    public boolean hasNumPartitionsForFairCase() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 numPartitionsForFairCase = 13;</code>
     */
    public int getNumPartitionsForFairCase() {
      return numPartitionsForFairCase_;
    }

    // optional bool enableGrouping = 14;
    public static final int ENABLEGROUPING_FIELD_NUMBER = 14;
    private boolean enableGrouping_;
    /**
     * <code>optional bool enableGrouping = 14;</code>
     */
    public boolean hasEnableGrouping() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool enableGrouping = 14;</code>
     */
    public boolean getEnableGrouping() {
      return enableGrouping_;
    }

    // optional float groupingFraction = 15;
    public static final int GROUPINGFRACTION_FIELD_NUMBER = 15;
    private float groupingFraction_;
    /**
     * <code>optional float groupingFraction = 15;</code>
     */
    public boolean hasGroupingFraction() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float groupingFraction = 15;</code>
     */
    public float getGroupingFraction() {
      return groupingFraction_;
    }

    private void initFields() {
      isPartitioned_ = false;
      sources_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      numPartitions_ = java.util.Collections.emptyList();
      filterClassName_ = "";
      filterUserPayload_ = com.google.protobuf.ByteString.EMPTY;
      minFraction_ = 0F;
      maxFraction_ = 0F;
      maxParallelism_ = 0;
      minOpsPerWorker_ = 0L;
      numChunks_ = java.util.Collections.emptyList();
      numTaskPerVertexInGroup_ = java.util.Collections.emptyList();
      positionInGroup_ = 0;
      numPartitionsForFairCase_ = 0;
      enableGrouping_ = false;
      groupingFraction_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasIsPartitioned()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, isPartitioned_);
      }
      for (int i = 0; i < sources_.size(); i++) {
        output.writeBytes(2, sources_.getByteString(i));
      }
      for (int i = 0; i < numPartitions_.size(); i++) {
        output.writeInt32(3, numPartitions_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(4, getFilterClassNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(5, filterUserPayload_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(6, minFraction_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(7, maxFraction_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(8, maxParallelism_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt64(9, minOpsPerWorker_);
      }
      for (int i = 0; i < numChunks_.size(); i++) {
        output.writeInt32(10, numChunks_.get(i));
      }
      for (int i = 0; i < numTaskPerVertexInGroup_.size(); i++) {
        output.writeInt32(11, numTaskPerVertexInGroup_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, positionInGroup_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(13, numPartitionsForFairCase_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(14, enableGrouping_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(15, groupingFraction_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isPartitioned_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sources_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(sources_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getSourcesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < numPartitions_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(numPartitions_.get(i));
        }
        size += dataSize;
        size += 1 * getNumPartitionsList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getFilterClassNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, filterUserPayload_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, minFraction_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, maxFraction_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, maxParallelism_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, minOpsPerWorker_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < numChunks_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(numChunks_.get(i));
        }
        size += dataSize;
        size += 1 * getNumChunksList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < numTaskPerVertexInGroup_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(numTaskPerVertexInGroup_.get(i));
        }
        size += dataSize;
        size += 1 * getNumTaskPerVertexInGroupList().size();
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, positionInGroup_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, numPartitionsForFairCase_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, enableGrouping_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, groupingFraction_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CartesianProductConfigProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.internal_static_CartesianProductConfigProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.internal_static_CartesianProductConfigProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto.class, org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto.Builder.class);
      }

      // Construct using org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        isPartitioned_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        sources_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        numPartitions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        filterClassName_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        filterUserPayload_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        minFraction_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        maxFraction_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        maxParallelism_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        minOpsPerWorker_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        numChunks_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        numTaskPerVertexInGroup_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        positionInGroup_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        numPartitionsForFairCase_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        enableGrouping_ = false;
        bitField0_ = (bitField0_ & ~0x00002000);
        groupingFraction_ = 0F;
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.internal_static_CartesianProductConfigProto_descriptor;
      }

      public org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto getDefaultInstanceForType() {
        return org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto.getDefaultInstance();
      }

      public org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto build() {
        org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto buildPartial() {
        org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto result = new org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isPartitioned_ = isPartitioned_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          sources_ = new com.google.protobuf.UnmodifiableLazyStringList(
              sources_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.sources_ = sources_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          numPartitions_ = java.util.Collections.unmodifiableList(numPartitions_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.numPartitions_ = numPartitions_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.filterClassName_ = filterClassName_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.filterUserPayload_ = filterUserPayload_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.minFraction_ = minFraction_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.maxFraction_ = maxFraction_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.maxParallelism_ = maxParallelism_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.minOpsPerWorker_ = minOpsPerWorker_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          numChunks_ = java.util.Collections.unmodifiableList(numChunks_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.numChunks_ = numChunks_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          numTaskPerVertexInGroup_ = java.util.Collections.unmodifiableList(numTaskPerVertexInGroup_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.numTaskPerVertexInGroup_ = numTaskPerVertexInGroup_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.positionInGroup_ = positionInGroup_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.numPartitionsForFairCase_ = numPartitionsForFairCase_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.enableGrouping_ = enableGrouping_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.groupingFraction_ = groupingFraction_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto) {
          return mergeFrom((org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto other) {
        if (other == org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto.getDefaultInstance()) return this;
        if (other.hasIsPartitioned()) {
          setIsPartitioned(other.getIsPartitioned());
        }
        if (!other.sources_.isEmpty()) {
          if (sources_.isEmpty()) {
            sources_ = other.sources_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureSourcesIsMutable();
            sources_.addAll(other.sources_);
          }
          onChanged();
        }
        if (!other.numPartitions_.isEmpty()) {
          if (numPartitions_.isEmpty()) {
            numPartitions_ = other.numPartitions_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureNumPartitionsIsMutable();
            numPartitions_.addAll(other.numPartitions_);
          }
          onChanged();
        }
        if (other.hasFilterClassName()) {
          bitField0_ |= 0x00000008;
          filterClassName_ = other.filterClassName_;
          onChanged();
        }
        if (other.hasFilterUserPayload()) {
          setFilterUserPayload(other.getFilterUserPayload());
        }
        if (other.hasMinFraction()) {
          setMinFraction(other.getMinFraction());
        }
        if (other.hasMaxFraction()) {
          setMaxFraction(other.getMaxFraction());
        }
        if (other.hasMaxParallelism()) {
          setMaxParallelism(other.getMaxParallelism());
        }
        if (other.hasMinOpsPerWorker()) {
          setMinOpsPerWorker(other.getMinOpsPerWorker());
        }
        if (!other.numChunks_.isEmpty()) {
          if (numChunks_.isEmpty()) {
            numChunks_ = other.numChunks_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureNumChunksIsMutable();
            numChunks_.addAll(other.numChunks_);
          }
          onChanged();
        }
        if (!other.numTaskPerVertexInGroup_.isEmpty()) {
          if (numTaskPerVertexInGroup_.isEmpty()) {
            numTaskPerVertexInGroup_ = other.numTaskPerVertexInGroup_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureNumTaskPerVertexInGroupIsMutable();
            numTaskPerVertexInGroup_.addAll(other.numTaskPerVertexInGroup_);
          }
          onChanged();
        }
        if (other.hasPositionInGroup()) {
          setPositionInGroup(other.getPositionInGroup());
        }
        if (other.hasNumPartitionsForFairCase()) {
          setNumPartitionsForFairCase(other.getNumPartitionsForFairCase());
        }
        if (other.hasEnableGrouping()) {
          setEnableGrouping(other.getEnableGrouping());
        }
        if (other.hasGroupingFraction()) {
          setGroupingFraction(other.getGroupingFraction());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIsPartitioned()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.tez.runtime.library.cartesianproduct.CartesianProductUserPayload.CartesianProductConfigProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bool isPartitioned = 1;
      private boolean isPartitioned_ ;
      /**
       * <code>required bool isPartitioned = 1;</code>
       */
      public boolean hasIsPartitioned() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bool isPartitioned = 1;</code>
       */
      public boolean getIsPartitioned() {
        return isPartitioned_;
      }
      /**
       * <code>required bool isPartitioned = 1;</code>
       */
      public Builder setIsPartitioned(boolean value) {
        bitField0_ |= 0x00000001;
        isPartitioned_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isPartitioned = 1;</code>
       */
      public Builder clearIsPartitioned() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isPartitioned_ = false;
        onChanged();
        return this;
      }

      // repeated string sources = 2;
      private com.google.protobuf.LazyStringList sources_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureSourcesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          sources_ = new com.google.protobuf.LazyStringArrayList(sources_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated string sources = 2;</code>
       */
      public java.util.List<java.lang.String>
          getSourcesList() {
        return java.util.Collections.unmodifiableList(sources_);
      }
      /**
       * <code>repeated string sources = 2;</code>
       */
      public int getSourcesCount() {
        return sources_.size();
      }
      /**
       * <code>repeated string sources = 2;</code>
       */
      public java.lang.String getSources(int index) {
        return sources_.get(index);
      }
      /**
       * <code>repeated string sources = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSourcesBytes(int index) {
        return sources_.getByteString(index);
      }
      /**
       * <code>repeated string sources = 2;</code>
       */
      public Builder setSources(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSourcesIsMutable();
        sources_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string sources = 2;</code>
       */
      public Builder addSources(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSourcesIsMutable();
        sources_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string sources = 2;</code>
       */
      public Builder addAllSources(
          java.lang.Iterable<java.lang.String> values) {
        ensureSourcesIsMutable();
        super.addAll(values, sources_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string sources = 2;</code>
       */
      public Builder clearSources() {
        sources_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string sources = 2;</code>
       */
      public Builder addSourcesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSourcesIsMutable();
        sources_.add(value);
        onChanged();
        return this;
      }

      // repeated int32 numPartitions = 3;
      private java.util.List<java.lang.Integer> numPartitions_ = java.util.Collections.emptyList();
      private void ensureNumPartitionsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          numPartitions_ = new java.util.ArrayList<java.lang.Integer>(numPartitions_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 numPartitions = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getNumPartitionsList() {
        return java.util.Collections.unmodifiableList(numPartitions_);
      }
      /**
       * <code>repeated int32 numPartitions = 3;</code>
       */
      public int getNumPartitionsCount() {
        return numPartitions_.size();
      }
      /**
       * <code>repeated int32 numPartitions = 3;</code>
       */
      public int getNumPartitions(int index) {
        return numPartitions_.get(index);
      }
      /**
       * <code>repeated int32 numPartitions = 3;</code>
       */
      public Builder setNumPartitions(
          int index, int value) {
        ensureNumPartitionsIsMutable();
        numPartitions_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 numPartitions = 3;</code>
       */
      public Builder addNumPartitions(int value) {
        ensureNumPartitionsIsMutable();
        numPartitions_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 numPartitions = 3;</code>
       */
      public Builder addAllNumPartitions(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureNumPartitionsIsMutable();
        super.addAll(values, numPartitions_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 numPartitions = 3;</code>
       */
      public Builder clearNumPartitions() {
        numPartitions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional string filterClassName = 4;
      private java.lang.Object filterClassName_ = "";
      /**
       * <code>optional string filterClassName = 4;</code>
       */
      public boolean hasFilterClassName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string filterClassName = 4;</code>
       */
      public java.lang.String getFilterClassName() {
        java.lang.Object ref = filterClassName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          filterClassName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string filterClassName = 4;</code>
       */
      public com.google.protobuf.ByteString
          getFilterClassNameBytes() {
        java.lang.Object ref = filterClassName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          filterClassName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string filterClassName = 4;</code>
       */
      public Builder setFilterClassName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        filterClassName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string filterClassName = 4;</code>
       */
      public Builder clearFilterClassName() {
        bitField0_ = (bitField0_ & ~0x00000008);
        filterClassName_ = getDefaultInstance().getFilterClassName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string filterClassName = 4;</code>
       */
      public Builder setFilterClassNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        filterClassName_ = value;
        onChanged();
        return this;
      }

      // optional bytes filterUserPayload = 5;
      private com.google.protobuf.ByteString filterUserPayload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes filterUserPayload = 5;</code>
       */
      public boolean hasFilterUserPayload() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes filterUserPayload = 5;</code>
       */
      public com.google.protobuf.ByteString getFilterUserPayload() {
        return filterUserPayload_;
      }
      /**
       * <code>optional bytes filterUserPayload = 5;</code>
       */
      public Builder setFilterUserPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        filterUserPayload_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes filterUserPayload = 5;</code>
       */
      public Builder clearFilterUserPayload() {
        bitField0_ = (bitField0_ & ~0x00000010);
        filterUserPayload_ = getDefaultInstance().getFilterUserPayload();
        onChanged();
        return this;
      }

      // optional float minFraction = 6;
      private float minFraction_ ;
      /**
       * <code>optional float minFraction = 6;</code>
       */
      public boolean hasMinFraction() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float minFraction = 6;</code>
       */
      public float getMinFraction() {
        return minFraction_;
      }
      /**
       * <code>optional float minFraction = 6;</code>
       */
      public Builder setMinFraction(float value) {
        bitField0_ |= 0x00000020;
        minFraction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float minFraction = 6;</code>
       */
      public Builder clearMinFraction() {
        bitField0_ = (bitField0_ & ~0x00000020);
        minFraction_ = 0F;
        onChanged();
        return this;
      }

      // optional float maxFraction = 7;
      private float maxFraction_ ;
      /**
       * <code>optional float maxFraction = 7;</code>
       */
      public boolean hasMaxFraction() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float maxFraction = 7;</code>
       */
      public float getMaxFraction() {
        return maxFraction_;
      }
      /**
       * <code>optional float maxFraction = 7;</code>
       */
      public Builder setMaxFraction(float value) {
        bitField0_ |= 0x00000040;
        maxFraction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float maxFraction = 7;</code>
       */
      public Builder clearMaxFraction() {
        bitField0_ = (bitField0_ & ~0x00000040);
        maxFraction_ = 0F;
        onChanged();
        return this;
      }

      // optional int32 maxParallelism = 8;
      private int maxParallelism_ ;
      /**
       * <code>optional int32 maxParallelism = 8;</code>
       */
      public boolean hasMaxParallelism() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 maxParallelism = 8;</code>
       */
      public int getMaxParallelism() {
        return maxParallelism_;
      }
      /**
       * <code>optional int32 maxParallelism = 8;</code>
       */
      public Builder setMaxParallelism(int value) {
        bitField0_ |= 0x00000080;
        maxParallelism_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 maxParallelism = 8;</code>
       */
      public Builder clearMaxParallelism() {
        bitField0_ = (bitField0_ & ~0x00000080);
        maxParallelism_ = 0;
        onChanged();
        return this;
      }

      // optional int64 minOpsPerWorker = 9;
      private long minOpsPerWorker_ ;
      /**
       * <code>optional int64 minOpsPerWorker = 9;</code>
       */
      public boolean hasMinOpsPerWorker() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int64 minOpsPerWorker = 9;</code>
       */
      public long getMinOpsPerWorker() {
        return minOpsPerWorker_;
      }
      /**
       * <code>optional int64 minOpsPerWorker = 9;</code>
       */
      public Builder setMinOpsPerWorker(long value) {
        bitField0_ |= 0x00000100;
        minOpsPerWorker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 minOpsPerWorker = 9;</code>
       */
      public Builder clearMinOpsPerWorker() {
        bitField0_ = (bitField0_ & ~0x00000100);
        minOpsPerWorker_ = 0L;
        onChanged();
        return this;
      }

      // repeated int32 numChunks = 10;
      private java.util.List<java.lang.Integer> numChunks_ = java.util.Collections.emptyList();
      private void ensureNumChunksIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          numChunks_ = new java.util.ArrayList<java.lang.Integer>(numChunks_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 numChunks = 10;</code>
       */
      public java.util.List<java.lang.Integer>
          getNumChunksList() {
        return java.util.Collections.unmodifiableList(numChunks_);
      }
      /**
       * <code>repeated int32 numChunks = 10;</code>
       */
      public int getNumChunksCount() {
        return numChunks_.size();
      }
      /**
       * <code>repeated int32 numChunks = 10;</code>
       */
      public int getNumChunks(int index) {
        return numChunks_.get(index);
      }
      /**
       * <code>repeated int32 numChunks = 10;</code>
       */
      public Builder setNumChunks(
          int index, int value) {
        ensureNumChunksIsMutable();
        numChunks_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 numChunks = 10;</code>
       */
      public Builder addNumChunks(int value) {
        ensureNumChunksIsMutable();
        numChunks_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 numChunks = 10;</code>
       */
      public Builder addAllNumChunks(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureNumChunksIsMutable();
        super.addAll(values, numChunks_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 numChunks = 10;</code>
       */
      public Builder clearNumChunks() {
        numChunks_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 numTaskPerVertexInGroup = 11;
      private java.util.List<java.lang.Integer> numTaskPerVertexInGroup_ = java.util.Collections.emptyList();
      private void ensureNumTaskPerVertexInGroupIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          numTaskPerVertexInGroup_ = new java.util.ArrayList<java.lang.Integer>(numTaskPerVertexInGroup_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
       */
      public java.util.List<java.lang.Integer>
          getNumTaskPerVertexInGroupList() {
        return java.util.Collections.unmodifiableList(numTaskPerVertexInGroup_);
      }
      /**
       * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
       */
      public int getNumTaskPerVertexInGroupCount() {
        return numTaskPerVertexInGroup_.size();
      }
      /**
       * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
       */
      public int getNumTaskPerVertexInGroup(int index) {
        return numTaskPerVertexInGroup_.get(index);
      }
      /**
       * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
       */
      public Builder setNumTaskPerVertexInGroup(
          int index, int value) {
        ensureNumTaskPerVertexInGroupIsMutable();
        numTaskPerVertexInGroup_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
       */
      public Builder addNumTaskPerVertexInGroup(int value) {
        ensureNumTaskPerVertexInGroupIsMutable();
        numTaskPerVertexInGroup_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
       */
      public Builder addAllNumTaskPerVertexInGroup(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureNumTaskPerVertexInGroupIsMutable();
        super.addAll(values, numTaskPerVertexInGroup_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 numTaskPerVertexInGroup = 11;</code>
       */
      public Builder clearNumTaskPerVertexInGroup() {
        numTaskPerVertexInGroup_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // optional int32 positionInGroup = 12;
      private int positionInGroup_ ;
      /**
       * <code>optional int32 positionInGroup = 12;</code>
       */
      public boolean hasPositionInGroup() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 positionInGroup = 12;</code>
       */
      public int getPositionInGroup() {
        return positionInGroup_;
      }
      /**
       * <code>optional int32 positionInGroup = 12;</code>
       */
      public Builder setPositionInGroup(int value) {
        bitField0_ |= 0x00000800;
        positionInGroup_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 positionInGroup = 12;</code>
       */
      public Builder clearPositionInGroup() {
        bitField0_ = (bitField0_ & ~0x00000800);
        positionInGroup_ = 0;
        onChanged();
        return this;
      }

      // optional int32 numPartitionsForFairCase = 13;
      private int numPartitionsForFairCase_ ;
      /**
       * <code>optional int32 numPartitionsForFairCase = 13;</code>
       */
      public boolean hasNumPartitionsForFairCase() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 numPartitionsForFairCase = 13;</code>
       */
      public int getNumPartitionsForFairCase() {
        return numPartitionsForFairCase_;
      }
      /**
       * <code>optional int32 numPartitionsForFairCase = 13;</code>
       */
      public Builder setNumPartitionsForFairCase(int value) {
        bitField0_ |= 0x00001000;
        numPartitionsForFairCase_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 numPartitionsForFairCase = 13;</code>
       */
      public Builder clearNumPartitionsForFairCase() {
        bitField0_ = (bitField0_ & ~0x00001000);
        numPartitionsForFairCase_ = 0;
        onChanged();
        return this;
      }

      // optional bool enableGrouping = 14;
      private boolean enableGrouping_ ;
      /**
       * <code>optional bool enableGrouping = 14;</code>
       */
      public boolean hasEnableGrouping() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional bool enableGrouping = 14;</code>
       */
      public boolean getEnableGrouping() {
        return enableGrouping_;
      }
      /**
       * <code>optional bool enableGrouping = 14;</code>
       */
      public Builder setEnableGrouping(boolean value) {
        bitField0_ |= 0x00002000;
        enableGrouping_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enableGrouping = 14;</code>
       */
      public Builder clearEnableGrouping() {
        bitField0_ = (bitField0_ & ~0x00002000);
        enableGrouping_ = false;
        onChanged();
        return this;
      }

      // optional float groupingFraction = 15;
      private float groupingFraction_ ;
      /**
       * <code>optional float groupingFraction = 15;</code>
       */
      public boolean hasGroupingFraction() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float groupingFraction = 15;</code>
       */
      public float getGroupingFraction() {
        return groupingFraction_;
      }
      /**
       * <code>optional float groupingFraction = 15;</code>
       */
      public Builder setGroupingFraction(float value) {
        bitField0_ |= 0x00004000;
        groupingFraction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float groupingFraction = 15;</code>
       */
      public Builder clearGroupingFraction() {
        bitField0_ = (bitField0_ & ~0x00004000);
        groupingFraction_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:CartesianProductConfigProto)
    }

    static {
      defaultInstance = new CartesianProductConfigProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:CartesianProductConfigProto)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_CartesianProductConfigProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CartesianProductConfigProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\035CartesianProductPayload.proto\"\214\003\n\033Cart" +
      "esianProductConfigProto\022\025\n\risPartitioned" +
      "\030\001 \002(\010\022\017\n\007sources\030\002 \003(\t\022\025\n\rnumPartitions" +
      "\030\003 \003(\005\022\027\n\017filterClassName\030\004 \001(\t\022\031\n\021filte" +
      "rUserPayload\030\005 \001(\014\022\023\n\013minFraction\030\006 \001(\002\022" +
      "\023\n\013maxFraction\030\007 \001(\002\022\026\n\016maxParallelism\030\010" +
      " \001(\005\022\027\n\017minOpsPerWorker\030\t \001(\003\022\021\n\tnumChun" +
      "ks\030\n \003(\005\022\037\n\027numTaskPerVertexInGroup\030\013 \003(" +
      "\005\022\027\n\017positionInGroup\030\014 \001(\005\022 \n\030numPartiti" +
      "onsForFairCase\030\r \001(\005\022\026\n\016enableGrouping\030\016",
      " \001(\010\022\030\n\020groupingFraction\030\017 \001(\002BN\n/org.ap" +
      "ache.tez.runtime.library.cartesianproduc" +
      "tB\033CartesianProductUserPayload"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_CartesianProductConfigProto_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_CartesianProductConfigProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CartesianProductConfigProto_descriptor,
              new java.lang.String[] { "IsPartitioned", "Sources", "NumPartitions", "FilterClassName", "FilterUserPayload", "MinFraction", "MaxFraction", "MaxParallelism", "MinOpsPerWorker", "NumChunks", "NumTaskPerVertexInGroup", "PositionInGroup", "NumPartitionsForFairCase", "EnableGrouping", "GroupingFraction", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
